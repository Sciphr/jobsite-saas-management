generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model saas_installations {
  id                    String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domain                String?                     @unique @db.VarChar(255)
  company_name          String                      @db.VarChar(255)
  admin_email           String                      @db.VarChar(255)
  database_url          String?
  status                String                      @default("active") @db.VarChar(50)
  created_at            DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                    @default(now()) @db.Timestamptz(6)
  last_accessed_at      DateTime?                   @db.Timestamptz(6)
  billing_email         String?                     @db.VarChar(255)
  billing_plan          String?                     @default("Pro") @db.VarChar(100)
  notes                 String?
  billing_cycle         String?                     @default("monthly") @db.VarChar(50)
  billing_amount        Decimal?                    @db.Decimal(10, 2)
  next_billing_date     DateTime?                   @db.Timestamptz(6)
  billing_status        String?                     @default("active") @db.VarChar(50)
  last_health_check     DateTime?                   @db.Timestamptz(6)
  health_status         String?                     @default("unknown") @db.VarChar(50)
  health_details        Json?                       @db.Json
  backup_enabled        Boolean?                    @default(true)
  last_backup_at        DateTime?                   @db.Timestamptz(6)
  backup_status         String?                     @default("pending") @db.VarChar(50)
  deployment_status     String?                     @default("pending") @db.VarChar(20)
  deployment_url        String?
  deployment_path       String?
  port_number           Int?
  subdomain             String?                     @db.VarChar(100)
  admin_name            String?                     @db.VarChar(255)
  admin_username        String?
  admin_password        String?
  saas_backup_logs      saas_backup_logs[]
  saas_deployments      saas_deployments[]
  saas_health_checks    saas_health_checks[]
  saas_port_assignments saas_port_assignments[]
  recovery_access_logs  saas_recovery_access_logs[]
  recovery_tokens       saas_recovery_tokens[]
  saas_support_tickets  saas_support_tickets[]

  @@index([domain], map: "idx_saas_installations_domain")
  @@index([status], map: "idx_saas_installations_status")
}

model saas_recovery_tokens {
  id              String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id String                      @db.Uuid
  token           String                      @unique @db.VarChar(255)
  purpose         String                      @db.VarChar(255)
  expires_at      DateTime                    @db.Timestamptz(6)
  created_by      String                      @db.VarChar(255)
  created_at      DateTime                    @default(now()) @db.Timestamptz(6)
  used_at         DateTime?                   @db.Timestamptz(6)
  used_by_ip      String?                     @db.Inet
  used_by_agent   String?
  is_active       Boolean                     @default(true)
  max_uses        Int                         @default(1)
  use_count       Int                         @default(0)
  permissions     Json                        @default("[]") @db.Json
  access_logs     saas_recovery_access_logs[]
  installation    saas_installations          @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_saas_recovery_tokens_installation")

  @@index([token], map: "idx_saas_recovery_tokens_token")
  @@index([installation_id], map: "idx_saas_recovery_tokens_installation")
  @@index([expires_at], map: "idx_saas_recovery_tokens_expires")
}

model saas_recovery_access_logs {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id String                @db.Uuid
  token_id        String?               @db.Uuid
  action          String                @db.VarChar(255)
  user_email      String?               @db.VarChar(255)
  ip_address      String?               @db.Inet
  user_agent      String?
  success         Boolean               @default(true)
  details         Json?                 @db.Json
  created_at      DateTime              @default(now()) @db.Timestamptz(6)
  performed_by    String?               @db.VarChar(255)
  installation    saas_installations    @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_saas_recovery_logs_installation")
  token           saas_recovery_tokens? @relation(fields: [token_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_saas_recovery_logs_token")

  @@index([installation_id], map: "idx_saas_recovery_logs_installation")
  @@index([created_at], map: "idx_saas_recovery_logs_created_at")
  @@index([action], map: "idx_saas_recovery_logs_action")
}

model saas_admin_users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  name          String    @db.VarChar(255)
  password_hash String
  role          String    @default("admin") @db.VarChar(50)
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  last_login_at DateTime? @db.Timestamptz(6)

  @@index([email], map: "idx_saas_admin_users_email")
}

model saas_backup_logs {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id    String             @db.Uuid
  backup_type        String             @db.VarChar(100)
  status             String             @db.VarChar(50)
  file_size          BigInt?
  file_path          String?
  error_message      String?
  started_at         DateTime?          @default(now()) @db.Timestamptz(6)
  completed_at       DateTime?          @db.Timestamptz(6)
  saas_installations saas_installations @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_backup_logs_installation")

  @@index([installation_id], map: "idx_backup_logs_installation")
  @@index([started_at], map: "idx_backup_logs_started_at")
  @@index([status], map: "idx_backup_logs_status")
}

model saas_health_checks {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id    String             @db.Uuid
  check_type         String             @db.VarChar(100)
  status             String             @db.VarChar(50)
  response_time      Int?
  error_message      String?
  details            Json?              @db.Json
  checked_at         DateTime?          @default(now()) @db.Timestamptz(6)
  saas_installations saas_installations @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_health_checks_installation")

  @@index([checked_at], map: "idx_health_checks_checked_at")
  @@index([installation_id], map: "idx_health_checks_installation")
  @@index([status], map: "idx_health_checks_status")
}

model saas_support_messages {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket_id            String               @db.Uuid
  sender_type          String               @db.VarChar(20)
  sender_name          String?              @db.VarChar(255)
  sender_email         String?              @db.VarChar(255)
  message              String
  is_internal          Boolean?             @default(false)
  created_at           DateTime?            @default(now()) @db.Timestamptz(6)
  saas_support_tickets saas_support_tickets @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_support_messages_ticket")

  @@index([created_at], map: "idx_support_messages_created_at")
  @@index([ticket_id], map: "idx_support_messages_ticket")
}

model saas_support_tickets {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id       String                  @db.Uuid
  ticket_number         String                  @unique @db.VarChar(20)
  title                 String                  @db.VarChar(255)
  description           String
  priority              String?                 @default("medium") @db.VarChar(20)
  status                String?                 @default("open") @db.VarChar(20)
  category              String?                 @db.VarChar(50)
  customer_email        String?                 @db.VarChar(255)
  customer_name         String?                 @db.VarChar(255)
  assigned_to           String?                 @db.VarChar(255)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  resolved_at           DateTime?               @db.Timestamptz(6)
  resolution_notes      String?
  saas_support_messages saas_support_messages[]
  saas_installations    saas_installations      @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_support_tickets_installation")

  @@index([created_at], map: "idx_support_tickets_created_at")
  @@index([installation_id], map: "idx_support_tickets_installation")
  @@index([ticket_number], map: "idx_support_tickets_number")
  @@index([priority], map: "idx_support_tickets_priority")
  @@index([status], map: "idx_support_tickets_status")
}

model saas_deployment_templates {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String    @db.VarChar(100)
  description       String?
  git_repo_url      String
  default_env_vars  Json?
  deployment_script String?
  is_active         Boolean?  @default(true)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model saas_deployments {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  installation_id    String?             @db.Uuid
  status             String              @db.VarChar(20)
  deployment_path    String?
  deployment_url     String?
  environment_vars   Json?
  error_message      String?
  started_at         DateTime?           @default(now()) @db.Timestamptz(6)
  completed_at       DateTime?           @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  saas_installations saas_installations? @relation(fields: [installation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([installation_id], map: "idx_deployments_installation")
  @@index([started_at], map: "idx_deployments_started_at")
  @@index([status], map: "idx_deployments_status")
}

model saas_port_assignments {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  port_number        Int                 @unique
  installation_id    String?             @db.Uuid
  is_available       Boolean?            @default(true)
  assigned_at        DateTime?           @db.Timestamptz(6)
  released_at        DateTime?           @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  saas_installations saas_installations? @relation(fields: [installation_id], references: [id], onUpdate: NoAction)
}
